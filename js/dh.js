let cartItems = [
    { id: 1, name: "√Åo thun b√© trai", price: 150000, quantity: 2, image: "https://placehold.co/100x100" },
    { id: 2, name: "ƒê·∫ßm c√¥ng ch√∫a b√© g√°i", price: 300000, quantity: 1, image: "https://placehold.co/100x100" }
    ];
    
    function updateCartUI() {
        const cartContainer = document.getElementById("cart-container");
        const totalItems = document.getElementById("total-items");
            let total = 0;
            cartContainer.innerHTML = "";
    
            cartItems.forEach((item, index) => {
                total += item.price * item.quantity;
                cartContainer.innerHTML += `
                    <div class="flex justify-between items-center bg-white p-4 rounded-lg shadow-md mt-2">
                        <img src="${item.image}" alt="${item.name}" class="w-20 h-20 rounded-lg shadow-sm">
                        <div class="flex-1 ml-4">
                            <h2 class="text-lg font-semibold text-gray-800">${item.name}</h2>
                            <p class="text-gray-600">Gi√°: <span class="font-bold">${item.price.toLocaleString()}‚Ç´</span></p>
                            <div class="flex items-center mt-2 space-x-2">
                                <button class="px-3 py-1 border rounded-lg bg-gray-200 hover:bg-gray-300" onclick="updateQuantity(${index}, -1)">-</button>
                                <span class="px-4 text-lg font-medium">${item.quantity}</span>
                                <button class="px-3 py-1 border rounded-lg bg-gray-200 hover:bg-gray-300" onclick="updateQuantity(${index}, 1)">+</button>
                            </div>
                        </div>
                        <button class="bg-white text-pink-300 border border-pink-300 px-2 py-1 rounded-md hover:bg-pink-300 hover:text-white transition" onclick="removeItem(${index})">
                            ‚ùå
                        </button>        
                    </div>
                `;
            });
            totalItems.innerText = cartItems.length;
            document.getElementById("subtotal").innerText = total.toLocaleString() + "‚Ç´";
            document.getElementById("grand-total").innerText = (total + 12000).toLocaleString() + "‚Ç´"; // Th√™m ph√≠ v·∫≠n chuy·ªÉn
        }

        function updateQuantity(index, change) {
            cartItems[index].quantity = Math.max(1, cartItems[index].quantity + change);
            updateCartUI();
        }
    
        function removeItem(index) {
            cartItems.splice(index, 1);
            updateCartUI();
        }
        updateCartUI();

        // H√†m l·∫•y s·ªë l∆∞·ª£ng s·∫£n ph·∫©m t·ª´ localStorage (n·∫øu c√≥)
        function updateCartCount() {
            let cart = JSON.parse(localStorage.getItem('cart')) || [];
            let totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
            document.getElementById('cart-count').textContent = totalItems;
        }
        // H√†m th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
        function addToCart(productId, quantity = 1) {
            let cart = JSON.parse(localStorage.getItem('cart')) || [];
            let productIndex = cart.findIndex(item => item.id === productId);
            if (productIndex !== -1) {
                cart[productIndex].quantity += quantity;
            } else {
                cart.push({ id: productId, quantity: quantity });
            }
        localStorage.setItem('cart', JSON.stringify(cart)); // L∆∞u l·∫°i gi·ªè h√†ng v√† c·∫≠p nh·∫≠t hi·ªÉn th·ªã
        updateCartCount();
    }

    // C·∫≠p nh·∫≠t gi·ªè h√†ng khi t·∫£i trang
    document.addEventListener('DOMContentLoaded', updateCartCount);
    let currentStep = 1;

    function checkStepCompletion(step) { // G·ªçi API ki·ªÉm tra ho√†n th√†nh b∆∞·ªõc
        return fetch("https://api.example.com/check-step", { 
            method: "POST", 
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ step: step }) 
        })
        .then(response => response.json());
    }

    // C·∫≠p nh·∫≠t giao di·ªán khi b∆∞·ªõc ƒë∆∞·ª£c ho√†n th√†nh
    function updateStepUI() {
        for (let i = 1; i <= 3; i++) {
            let step = document.getElementById(`step-${i}`);
            if (i <= currentStep) {
                step.classList.add("bg-pink-500", "text-white");
                step.classList.remove("bg-gray-300", "text-gray-500");
            } else {
                step.classList.add("bg-gray-300", "text-gray-500");
                step.classList.remove("bg-pink-500", "text-white");
            }
        }
        if (currentStep === 3) {
            document.getElementById("complete-order").disabled = false;
        }
    }

    // X·ª≠ l√Ω t·ª± ƒë·ªông c·∫≠p nh·∫≠t b∆∞·ªõc
    function completeCurrentStep() {
        checkStepCompletion(currentStep).then(data => {
            if (data.success) {
                currentStep++;
                updateStepUI();
            }
        }).catch(error => console.error("L·ªói API:", error));
    }
    setInterval(() => { // G·ªçi ki·ªÉm tra t·ª± ƒë·ªông m·ªói 5 gi√¢y
        if (currentStep < 3) {
            completeCurrentStep();
        }
    }, 5000);

    function showAddressForm() { 
        document.getElementById("address-form").classList.toggle("hidden"); // Hi·ªán form ngay tr√™n trang
    }
    
    function showAddressForm() {
        document.getElementById("address-modal").classList.remove("hidden"); // Hi·ªán popup
    }
    
    function closeModal() {
        document.getElementById("address-modal").classList.add("hidden"); // ·∫®n popup
    }
    
    function saveAddress() {
        alert("ƒê√£ l∆∞u ƒë·ªãa ch·ªâ m·ªõi!"); 
        closeModal(); // Sau khi l∆∞u, ·∫©n popup
    }
    
    function showAddressForm() {
        let modal = document.getElementById("address-modal");
        modal.classList.remove("hidden");
        setTimeout(() => modal.classList.add("opacity-100"), 10); // Hi·ªáu ·ª©ng m∆∞·ª£t
    }

    function closeModal() {
        let modal = document.getElementById("address-modal");
        modal.classList.remove("opacity-100");
        setTimeout(() => modal.classList.add("hidden"), 300); // ·∫®n sau hi·ªáu ·ª©ng
    }
    
    function saveAddress() {
        alert("ƒê√£ l∆∞u ƒë·ªãa ch·ªâ m·ªõi!"); 
        closeModal();
    }

    document.addEventListener("DOMContentLoaded", function () {
        loadProvinces();
    
        document.getElementById("province").addEventListener("change", function () {
            loadDistricts();
            updateAddress();
        });
    
        document.getElementById("district").addEventListener("change", function () {
            loadWards();
            updateAddress();
        });
    
        document.getElementById("ward").addEventListener("change", updateAddress);
    });
    
    async function loadProvinces() {
        let response = await fetch("https://provinces.open-api.vn/api/?depth=1");
        let data = await response.json();
    
        let provinceSelect = document.getElementById("province");
        provinceSelect.innerHTML = '<option value="">Ch·ªçn t·ªânh/th√†nh ph·ªë</option>';
    
        data.forEach(province => {
            let option = document.createElement("option");
            option.value = province.code; // D√πng code ƒë·ªÉ load qu·∫≠n/huy·ªán
            option.textContent = province.name;
            provinceSelect.appendChild(option);
        });
    }
    
    async function loadDistricts() {
        let provinceCode = document.getElementById("province").value;
        if (!provinceCode) return;
    
        let response = await fetch(`https://provinces.open-api.vn/api/p/${provinceCode}?depth=2`);
        let data = await response.json();
    
        let districtSelect = document.getElementById("district");
        districtSelect.innerHTML = '<option value="">Ch·ªçn qu·∫≠n/huy·ªán</option>';
    
        data.districts.forEach(district => {
            let option = document.createElement("option");
            option.value = district.code; // D√πng code ƒë·ªÉ load ph∆∞·ªùng/x√£
            option.textContent = district.name;
            districtSelect.appendChild(option);
        });
    
        // Reset ph∆∞·ªùng/x√£ khi ch·ªçn t·ªânh m·ªõi
        document.getElementById("ward").innerHTML = '<option value="">Ch·ªçn ph∆∞·ªùng/x√£</option>';
    }
    
    async function loadWards() {
        let districtCode = document.getElementById("district").value;
        if (!districtCode) return;
    
        let response = await fetch(`https://provinces.open-api.vn/api/d/${districtCode}?depth=2`);
        let data = await response.json();
    
        let wardSelect = document.getElementById("ward");
        wardSelect.innerHTML = '<option value="">Ch·ªçn ph∆∞·ªùng/x√£</option>';
    
        data.wards.forEach(ward => {
            let option = document.createElement("option");
            option.value = ward.name;
            option.textContent = ward.name;
            wardSelect.appendChild(option);
        });
    }
    
    // üü¢ C·∫≠p nh·∫≠t √¥ nh·∫≠p ƒë·ªãa ch·ªâ khi ch·ªçn t·ªânh, qu·∫≠n, ph∆∞·ªùng
    function updateAddress() {
        let province = document.getElementById("province").options[document.getElementById("province").selectedIndex].text;
        let district = document.getElementById("district").options[document.getElementById("district").selectedIndex].text;
        let ward = document.getElementById("ward").value;
    
        let fullAddress = [ward, district, province].filter(Boolean).join(", ");
        document.getElementById("full-address").value = fullAddress;
    }

    function updateAddress() {
        let addressInput = document.getElementById("full-address");
    
        let province = document.getElementById("province").options[document.getElementById("province").selectedIndex].text;
        let district = document.getElementById("district").options[document.getElementById("district").selectedIndex].text;
        let ward = document.getElementById("ward").value;
    
        let selectedAddress = [ward, district, province].filter(Boolean).join(", ");
    
        // N·∫øu ng∆∞·ªùi d√πng ch∆∞a nh·∫≠p g√¨ -> t·ª± ƒë·ªông ƒëi·ªÅn ƒë·ªãa ch·ªâ t·ª´ dropdown
        if (!addressInput.dataset.userTyped) {
            addressInput.value = selectedAddress;
        } else {
            // N·∫øu ng∆∞·ªùi d√πng ƒë√£ nh·∫≠p, ch·ªâ th√™m t·ªânh/qu·∫≠n/ph∆∞·ªùng v√†o cu·ªëi
            let currentAddress = addressInput.value.split(" - ")[0]; // L·∫•y ph·∫ßn t·ª± nh·∫≠p
            addressInput.value = currentAddress + " - " + selectedAddress;
        }
    }
    
    // üü¢ ƒê√°nh d·∫•u khi ng∆∞·ªùi d√πng nh·∫≠p tay
    document.getElementById("full-address").addEventListener("input", function () {
        this.dataset.userTyped = true;
    });
    
    function saveAddress() {
        // L·∫•y gi√° tr·ªã t·ª´ c√°c tr∆∞·ªùng nh·∫≠p
        let fullName = document.querySelector('input[placeholder="H·ªç v√† t√™n"]').value;
        let phone = document.querySelector('input[placeholder="S·ªë ƒëi·ªán tho·∫°i"]').value;
        let addressDetail = document.getElementById("full-address").value;
        let province = document.getElementById("province").selectedOptions[0].text;
        let district = document.getElementById("district").selectedOptions[0].text;
        let ward = document.getElementById("ward").selectedOptions[0].text;
    
        // Ki·ªÉm tra n·∫øu ch∆∞a ch·ªçn t·ªânh/qu·∫≠n/ph∆∞·ªùng th√¨ kh√¥ng l∆∞u
        if (!province || province === "Ch·ªçn t·ªânh/th√†nh ph·ªë" || 
            !district || district === "Ch·ªçn qu·∫≠n/huy·ªán" || 
            !ward || ward === "Ch·ªçn ph∆∞·ªùng/x√£") {
            alert("Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß ƒë·ªãa ch·ªâ!");
            return;
        }
    
        // Hi·ªÉn th·ªã ƒë·ªãa ch·ªâ ƒë√£ nh·∫≠p l√™n trang
        let fullAddressText = `${addressDetail}, ${ward}, ${district}, ${province}`;
        document.getElementById("selected-address").innerText = fullAddressText;
    
        // ƒê√≥ng popup sau khi l∆∞u
        closeModal();
    }
    
    function saveAddress() {
        // L·∫•y gi√° tr·ªã t·ª´ c√°c tr∆∞·ªùng nh·∫≠p
        let fullName = document.querySelector('input[placeholder="H·ªç v√† t√™n"]').value;
        let phone = document.querySelector('input[placeholder="S·ªë ƒëi·ªán tho·∫°i"]').value;
        let addressDetail = document.getElementById("full-address").value;
        let province = document.getElementById("province").selectedOptions[0].text;
        let district = document.getElementById("district").selectedOptions[0].text;
        let ward = document.getElementById("ward").selectedOptions[0].text;
    
        // Ki·ªÉm tra n·∫øu ch∆∞a ch·ªçn t·ªânh/qu·∫≠n/ph∆∞·ªùng th√¨ kh√¥ng l∆∞u
        if (!province || province === "Ch·ªçn t·ªânh/th√†nh ph·ªë" || 
            !district || district === "Ch·ªçn qu·∫≠n/huy·ªán" || 
            !ward || ward === "Ch·ªçn ph∆∞·ªùng/x√£") {
            alert("Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß ƒë·ªãa ch·ªâ!");
            return;
        }
    
        // Hi·ªÉn th·ªã ƒë·ªãa ch·ªâ ƒë√£ nh·∫≠p l√™n trang
        let fullAddressText = `${addressDetail}, ${ward}, ${district}, ${province}`;
        document.getElementById("selected-address").innerText = fullAddressText;
    
        // ·∫®n n√∫t "Th√™m ƒë·ªãa ch·ªâ m·ªõi"
        document.getElementById("add-address-btn").style.display = "none";
    
        // ƒê√≥ng popup sau khi l∆∞u
        closeModal();
    }
    
    function editAddress() {
        // L·∫•y n·ªôi dung ƒë·ªãa ch·ªâ ƒë√£ l∆∞u
        let savedAddress = document.getElementById("selected-address").innerText;
        if (!savedAddress) return; // N·∫øu ch∆∞a c√≥ ƒë·ªãa ch·ªâ th√¨ kh√¥ng l√†m g√¨
    
        // T√°ch ƒë·ªãa ch·ªâ th√†nh c√°c ph·∫ßn (gi·∫£ s·ª≠ theo ƒë√∫ng format: "ƒê·ªãa ch·ªâ chi ti·∫øt, Ph∆∞·ªùng/X√£, Qu·∫≠n/Huy·ªán, T·ªânh/Th√†nh ph·ªë")
        let parts = savedAddress.split(", ").reverse(); 
    
        // ƒê·ªï d·ªØ li·ªáu v√†o c√°c √¥ ch·ªçn (n·∫øu c√≥ d·ªØ li·ªáu h·ª£p l·ªá)
        if (parts[0]) selectOptionByText("province", parts[0]);
        if (parts[1]) selectOptionByText("district", parts[1]);
        if (parts[2]) selectOptionByText("ward", parts[2]);
    
        // ƒêi·ªÅn ƒë·ªãa ch·ªâ chi ti·∫øt
        document.getElementById("full-address").value = parts[3] || "";
    
        // Hi·ªÉn th·ªã popup nh·∫≠p ƒë·ªãa ch·ªâ
        openModal();
    }
    
    // H√†m ch·ªçn option theo n·ªôi dung text
    function selectOptionByText(selectId, text) {
        let selectElement = document.getElementById(selectId);
        for (let option of selectElement.options) {
            if (option.text.trim() === text.trim()) {
                option.selected = true;
                if (selectId === "province") loadDistricts(); // T·∫£i danh s√°ch qu·∫≠n
                if (selectId === "district") loadWards(); // T·∫£i danh s√°ch ph∆∞·ªùng
                break;
            }
        }
    }
    
    function openModal(edit = false) {
        let modal = document.getElementById("address-modal");
        modal.classList.remove("hidden"); // Hi·ªán popup
    
        if (edit) {
            // L·∫•y th√¥ng tin ƒë·ªãa ch·ªâ hi·ªán t·∫°i
            let savedAddress = document.getElementById("saved-address").textContent;
            document.getElementById("full-address").value = savedAddress; // ƒê·ªï d·ªØ li·ªáu v√†o √¥ nh·∫≠p
        }
    }
    
    document.getElementById("edit-address-btn").addEventListener("click", function () {
        openModal(true); // G·ªçi modal v·ªõi ch·∫ø ƒë·ªô ch·ªânh s·ª≠a
    });
    
    
    